# This docker-compose file can be used to bring up an example instance of oauth2-proxy
# for manual testing and exploration of features.
# Alongside OAuth2-Proxy, this file also starts Dex to act as the identity provider,
# etcd for storage for Dex  and HTTPBin as an example upstream.
#
# This can either be created using docker-compose
#    docker-compose -f docker-compose.yaml <command>
# Or:
#    make <command> (eg. make up, make down)
#
# Access http://localhost:4180 to initiate a login cycle
version: '3.0'
services:
  authorizer:
    container_name: authorizer
    image: kmor76/jwt_authorizer:0.01
    command: python3 main.py 0.0.0.0 8080 httpbinkong 80 admins
    ports:
      - 8081:8080/tcp
    restart: unless-stopped
    networks:
      proxy: {}
  authorizer-2:
    container_name: authorizer-2
    image: kmor76/jwt_authorizer:0.01
    command: python3 main.py 0.0.0.0 8080 httpbinkong 80 developers
    ports:
      - 8082:8080/tcp
    restart: unless-stopped
    networks:
      proxy: {}
  oauth2-proxy:
    container_name: oauth2-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.4.0
    command: --config /oauth2-proxy.cfg --allowed-group=admins --allowed-group=developers --pass-authorization-header
    ports:
      - 4180:4180/tcp
    volumes:
      - "./oauth2-proxy.cfg:/oauth2-proxy.cfg"
    restart: unless-stopped
    networks:
      proxy: {}
    depends_on:
      - dex
  dex:
    container_name: dex
    image: ghcr.io/dexidp/dex:v2.30.3
    command: dex serve /dex.yaml
    ports:
      - 4190:4190/tcp
    hostname: dex
    volumes:
      - "./dex.yaml:/dex.yaml"
    restart: unless-stopped
    networks:
      proxy:
        aliases:
        - dex.localhost
    depends_on:
      - etcd
  httpbinkong:
    container_name: httpbinkong
    image: ealen/echo-server:0.7.0
    ports:
      - 8090:80/tcp
    networks:
      proxy: {}
  etcd:
    container_name: etcd
    image: gcr.io/etcd-development/etcd:v3.4.7
    entrypoint: /usr/local/bin/etcd
    command:
      - --listen-client-urls=http://0.0.0.0:2379
      - --advertise-client-urls=http://etcd:2379
    networks:
      proxy: {}
  ldap:
    image: osixia/openldap:1.4.0
    # Copying is required because the entrypoint modifies the *.ldif files.
    # For verbose output, use:  command: ["--copy-service", "--loglevel", "debug"]
    command: ["--copy-service"]
    environment:
      # Required if using LDAPS:
      # Since Dex doesn't use a client TLS certificate, downgrade from "demand" to "try".
      LDAP_TLS_VERIFY_CLIENT: try
    # The hostname is required if using LDAPS with certificate validation.
    # In Dex, use the same hostname (with port) for `connectors[].config.host`.
    #hostname: YOUR-HOSTNAME
    #
    # https://github.com/osixia/docker-openldap#seed-ldap-database-with-ldif
    # Option 1: Add custom seed file -> mount to         /container/service/slapd/assets/config/bootstrap/ldif/custom/
    # Option 2: Overwrite default seed file -> mount to  /container/service/slapd/assets/config/bootstrap/ldif/
    volumes:
    - ./config-ldap.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/config-ldap.ldif
    ports:
    - 389:389
    - 636:636
    networks:
      proxy: {}
  nginx:
    container_name: nginx
    image: nginx:1.18
    ports:
      - 80:80/tcp
    hostname: nginx
    volumes:
      - "./nginx.conf:/etc/nginx/conf.d/default.conf"
    networks:
      proxy: {}
    depends_on:
      - authorizer
      - authorizer-2
networks:
  dex: {}
  etcd: {}
  httpbin: {}
  proxy: {}
